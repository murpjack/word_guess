name: Build & deploy

on: workflow_dispatch

jobs:
  build:
    defaults:
      run:
        working-directory: ./app

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - name: Setup Elm environment
        uses: JorelAli/setup-elm@v5

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Build
        run: yarn build:prod

      - name: Zip
        run: zip -r dist_dir.zip dist/

      - uses: actions/upload-artifact@v3
        with:
          name: dist_dir
          path: dist_dir.zip

      # TODO: Update this step once happy with release asset
      - name: GH release
        run: |
          gh release delete v0.0.1 --yes
          gh release create v0.0.1 --title "v0.0.1" dist_dir.zip
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
#     - name: S3 uploader
#         uses: a-sync/s3-uploader@2.0.1
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_REGION: ${{ secrets.AWS_REGION }}
#           S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
#           S3_KEY: ${{ secrets.S3_KEY }}
#           FILE: dist_dir.zip
#
#
#   deploy_prod:
#     name: Deploy to production
#     environment: production
#     runs-on: ubuntu-latest
#     needs: build
#     defaults:
#       run:
#         working-directory: ./tf
#
#     permissions:
#       id-token: write # This is required for requesting the JWT
#       contents: read # This is required for actions/checkout
#
#     steps:
#       - name: Configure aws credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           role-to-assume: ${{ secrets.TF_ROLE }}
#           aws-region: ${{ secrets.AWS_REGION }}
#
#       - uses: actions/checkout@v4
#
#       - uses: actions/download-artifact@v3
#         with:
#           name: dist_dir
#
#       - uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_wrapper: false
#
#       # TODO: fmt should be run as a commit hook and not in the pipeline
#       - name: Terraform fmt
#         id: fmt
#         run: terraform fmt -check
#         continue-on-error: true
#
#       - name: Terraform Init
#         id: init
#         run: terraform init
#
#       # TODO: validate should be run as a commit hook and not in the pipeline
#       - name: Terraform Validate
#         id: validate
#         run: terraform validate -no-color
#
#       - name: Download env vars
#         id: tfvars
#         uses: keithweaver/aws-s3-github-action@v1.0.0
#         with:
#           command: cp
#           source: "s3://${{ secrets.AWS_S3_BUCKET }}/network/dev.tfvars"
#           destination: dev.tfvars
#           aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws_region: ${{ secrets.AWS_REGION }}
#
#       - name: Terraform Plan
#         env:
#           DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
#           DO_AUTH_TOKEN: ${{ secrets.DO_AUTH_TOKEN }}
#         id: plan
#         run: terraform plan -no-color -var-file="../dev.tfvars"
#         continue-on-error: true
#
#       - name: Terraform Apply
#         env:
#           DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
#           DO_AUTH_TOKEN: ${{ secrets.DO_AUTH_TOKEN }}
#         run: terraform apply -auto-approve -input=false -var-file="../dev.tfvars"
#
#   # TODO: Temporary, delete release
#   cleanup:
#     name: Cleanup releases while testing
#     environment: production
#     runs-on: ubuntu-latest
#     needs: build
